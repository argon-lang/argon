<ArgonTest>

    <Name>Option</Name>

    <InputSource name="test.argon"><![CDATA[

import Ar._

proc printOpt (opt: Option String): Unit =
	puts (opt.getOrElse(_ => 'Empty!'))

proc main(): Unit do
	printOpt (Some String 'Hello World!!!')
	printOpt (None String)
end


    ]]></InputSource>

    <InputSource name="Option.argon"><![CDATA[
        namespace Ar

        public sealed trait Option(T: type) <: Object

            public abstract def _.map(U: type)(f1: T -> U): Option U
            public abstract def _.getOrElse(f2: Unit -> T): T

        end

        public constructor Some(T1: type)(value: T1): Option T1

            public override def _.map(U: type)(f3: T1 -> U): Option U =
                Some U (f3 value)

            public override def _.getOrElse(f4: Unit -> T1): T1 =
                value

        end

        public constructor None(T2: type): Option T2

            public override def _.map(U: type)(f5: T2 -> U): Option U =
                None U

            public override def _.getOrElse(f6: Unit -> T2): T2 =
                f6()

        end

    ]]></InputSource>

    <ExpectedOutput>
        Hello World!!!
        Empty!
    </ExpectedOutput>

</ArgonTest>