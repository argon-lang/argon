package argon.tube;

import nobleidl.core;


@esexpr:(derive-codec)
record tube-name {
    head: string;
    tail: list[string];
}

@esexpr:(derive-codec)
record module-path {
    path: list[string];
}

@esexpr:(derive-codec)
record module-name {
    tube: tube-name;
    path: module-path;
}


@esexpr:(derive-codec)
enum identifier {
    named { s: string; },
    bin-op { op: binary-operator; },
    un-op { op: unary-operator; },
    extension { inner: identifier; },
    inverse { inner: identifier; },
    update { inner: identifier; },
}

@esexpr:(derive-codec)
enum binary-operator {
    plus,
    minus,
    mul,
    div,
    equal,
    not-equal,
    less-than,
    less-than-eq,
    greater-than,
    greater-than-eq,
    bit-or,
    bit-xor,
    bit-and,
    shift-left,
    shift-right,
    concat,
}

@esexpr:(derive-codec)
enum unary-operator {
    plus,
    minus,
    bit-not,
    logical-not,
}

@esexpr:(derive-codec)
record erased-signature {
    params: list[erased-signature-type];
    result: erased-signature-type;
}

@esexpr:(derive-codec)
enum erased-signature-type {
    builtin {
        b: builtin-type;

        @esexpr: (vararg)
        args: list[erased-signature-type];
    },
    function {
        input: erased-signature-type;
        output: erased-signature-type;
    },
    record {
        record-import: import-specifier;

        @esexpr: (vararg)
        args: list[erased-signature-type];
    },
    tuple {
        @esexpr: (vararg)
        elements: list[erased-signature-type];
    },
    erased,
}
@esexpr:(derive-codec)
enum builtin-type {
    int,
    bool,
    string,
    never,
    conjunction,
    disjunction,
}

@esexpr:(derive-codec)
record import-specifier {
    tube: tube-name;
    module-path: module-path;

    @esexpr: (keyword)
    @esexpr: (optional)
    name: optional-field[identifier];

    @esexpr: (keyword)
    sig: erased-signature;
}

