package argon.plugin;

import nobleidl.core;
import argon.tube;
import argon.plugin.options;


interface platform-plugin[externs, e: exception, platform-options] {
    option-decoder(): option-decoder[e, platform-options];

    function-reference-codec(): esexpr-codec[extern-function-ref[externs]];
    function-implementation-codec(): esexpr-codec[extern-function-impl[externs]];
    record-reference-codec(): esexpr-codec[extern-record-ref[externs]];

    define-function-reference(options: platform-options, specifier: import-specifier): extern-function-ref[externs] throws e;
    load-extern-function(options: platform-options, id: string): option[extern-function-impl[externs]] throws e;

    define-record-reference(options: platform-options, specifier: import-specifier): extern-record-ref[externs] throws e;

    emitter(): option[tube-emitter-factory[externs, e]];
    tube-loaders(): dict[tube-loader[externs]];
}

interface platform-plugin-factory[externs] {
    plugin-id(): string;

    create[a, e: exception](callback: platform-plugin-factory-callback[externs, e, a]): a;
}

interface platform-plugin-factory-callback[externs, e: exception, a] {
    call[platform-options](plugin: platform-plugin[externs, e, platform-options]): a;
}

exception plugin-error of unit;

extern type extern-function-impl[externs];
extern type extern-function-ref[externs];

extern type extern-record-ref[externs];


interface tube-emitter-factory[externs, e: exception] {
    create[a](callback: tube-emitter-factory-callback[externs, e, a]): a;
}

interface tube-emitter-factory-callback[externs, e: exception, a] {
    call[output-options, output](emitter: tube-emitter[externs, e, output-options, output]): a;
}

interface tube-emitter[externs, e: exception, output-options, output] {
    output-options-decoder(): option-decoder[e, output-options];
    output-handler(): output-handler[e, output];
    emit-tube(tube: argon.plugin.vm.tube-definition[externs, e], options: output-options): output throws e;
    test-executors(): list[tube-test-executor-factory[e, output-options, output]];
}

interface tube-test-executor-factory[e: exception, output-options, output] {
    create[a](callback: tube-test-executor-factory-callback[e, output-options, output, a]): a;
}

interface tube-test-executor-factory-callback[e: exception, output-options, output, a] {
    call[compiled-tube](executor: tube-test-executor[e, output-options, output, compiled-tube]): a;
}

interface tube-test-executor[e: exception, output-options, output, compiled-tube] {
    description(): string;
    output-options(): output-options;
    platform-options(): esexpr;
    get-library(o: output): compiled-tube throws e;
    execute(libraries: library-map[compiled-tube], program: compiled-tube): test-execution-result;
}

record library-map[compiled-tube] {
    entries: list[library-map-entry[compiled-tube]];
}

record library-map-entry[compiled-tube] {
    key: tube-name;
    value: compiled-tube;
}

enum test-execution-result {
    completed {
        output: string;
    },

    error {
        message: string;
    },
}

interface tube-loader[externs] {

}


@scala:(companion-extends "DecodeErrorCompanion")
exception decode-error of decode-path;
extern type decode-path;


interface esexpr-codec[a] {
    encode(value: a): esexpr;
    decode(expr: esexpr): a throws decode-error;
}

