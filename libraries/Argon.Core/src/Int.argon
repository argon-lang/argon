
import ./Object/*
import ./Bool/*
import ./String/*
import /Never

public class Int <: Object
	public def this.to_s(): String = extern Int_to_s
end

public def (+) (a: Int): Int = a
public def (-) (a: Int): Int = extern negateInt
public def (~~~) (a: Int): Int = extern bitNotInt

public def (+) (a: Int) (b: Int): Int = extern addInt
public def (-) (a: Int) (b: Int): Int = extern subInt
public def (*) (a: Int) (b: Int): Int = extern mulInt
public def (/) (a: Int) (b: Int): Int = extern divInt

public def (|||) (a: Int) (b: Int): Int = extern bitOrInt
public def (&&&) (a: Int) (b: Int): Int = extern bitAndInt
public def (^^^) (a: Int) (b: Int): Int = extern bitXOrInt
public def (<<<) (a: Int) (b: Int): Int = extern shiftLeftInt
public def (>>>) (a: Int) (b: Int): Int = extern shiftRightInt

public def (=) (a: Int) (b: Int): Bool = extern intEqual
public inline def (!=) (a: Int) (b: Int): Bool = !(a = b)
public def (<) (a: Int) (b: Int): Bool = extern intLessThan
public def (<=) (a: Int) (b: Int): Bool = extern intLessThanEq
public def (>) (a: Int) (b: Int): Bool = extern intGreaterThan
public def (>=) (a: Int) (b: Int): Bool = extern intGreaterThanEq



public erased proof def intEqualImpliesEqualTo[a: Int, b: Int](requires p: ((a = b) == true)): (a == b) =
	extern assumeTrue

public erased proof def intNotEqualImpliesNotEqualTo[a: Int, b: Int](requires p: ((a = b) == false)): ((a == b) -> Never) =
	extern assumeTrue

public erased proof def intEqualToImpliesEqual[a: Int, b: Int](requires p: (a == b)): ((a = b) == true) =
	extern assumeTrue

public erased proof def intNotEqualToImpliesNotEqual[a: Int, b: Int](requires p: ((a == b) -> Never)): ((a = b) == false) =
	extern assumeTrue



public erased proof def intLEQReflexive[a: Int, b: Int](requires p: (a == b)): ((a <= b) == true) =
	extern assumeTrue

public erased proof def intLEQTransitive[a: Int, b: Int, c: Int](requires p: ((a <= b) == true), q: ((b <= c) == true)): ((a <= c) == true) =
	extern assumeTrue

public erased proof def intLEQAntisymmetric[a: Int, b: Int](requires p: ((a <= b) == true), q: ((b <= a) == true)): (a == b) =
	extern assumeTrue

public erased proof def intLEQStronglyConnected[a: Int, b: Int, c: Int](requires p: ((a <= b) == true), q: ((b <= c) == true)): ((a <= c) == true) =
	extern assumeTrue


public erased proof def intLEQAndNotEqualImpliesEqualsOrLT[a: Int, b: Int](requires p: ((a <= b) == true), q: ((a == b) -> Never)): ((a < b) == true) =
	extern assumeTrue

public erased proof def intLTImpliesLEQ[a: Int, b: Int](requires p: ((a < b) == true)): ((a <= b) == true) =
	extern assumeTrue

public erased proof def intLTImpliesNotEqual[a: Int, b: Int](requires p: ((a < b) == true)): ((a == b) -> Never) =
	extern assumeTrue


public erased proof def intGEQIsConverseLEQ[a: Int, b: Int](requires p: ((a <= b) == true)): ((b >= a) == true) =
	extern assumeTrue


public erased proof def intGTIsConverseLT[a: Int, b: Int](requires p: ((a < b) == true)): ((b > a) == true) =
	extern assumeTrue
