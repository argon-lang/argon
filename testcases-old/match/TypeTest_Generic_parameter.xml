<ArgonTest enabled="false">

    <Name>Type test (Generic parameter)</Name>


    <InputSource name="index.argon"><![CDATA[
            
        import Argon.Core/*

        proc checkForType(T: type)(value: Object): Unit =
            match value
            case val t: T =
                puts 'Matched'
            case _ =
                puts 'Not matched'
            end

        trait A <: Object
        end
        trait B(T: type) <: A
            public abstract def _.value: T
        end
        trait C <: A
        end

        constructor NewB(T: type)(value: T): B T
            public override def _.value: T = value
        end

        constructor NewC(): C
        end
        
        proc main(): Unit do
            checkForType A (NewB String 'Hey')
            checkForType (B String) (NewB String 'Hey')
            checkForType (B Int) (NewB String 'Hey')
            checkForType C (NewB String 'Hey')
            checkForType A (NewC ())
            checkForType (B String) (NewC ())
            checkForType (B Int) (NewC ())
            checkForType C (NewC ())
        end
        
            
    ]]></InputSource>

    <ExpectedOutput>
        Matched
        Matched
        Not matched
        Not matched
        Matched
        Not matched
        Not matched
        Matched
    </ExpectedOutput>

</ArgonTest>