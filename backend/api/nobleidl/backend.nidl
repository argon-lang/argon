package argon.backend;

import nobleidl.core;

interface backend[e: exception, output] {
    code-generator(): code-generator-factory[e, output];
    test-executor(): option[test-executor-factory[e, output]];
}

@scala:(adapter-needs-zio-runtime)
extern type binary-resource[e: exception];

interface directory-resource[e: exception, res] {
    contents(): scoped-resource[stream[e, directory-entry[res]]] throws e;
}


record directory-entry[res] {
    dirs: list[string];
    file-name: string;
    resource: res;
}


enum code-generator[e: exception, options, output] {
    library {
        generator: library-code-generator[e, options, output];
    },
}

interface library-code-generator[e: exception, options, output] {
    option-parser(): argon.backend.options.option-parser[e, options];
    output-provider(): argon.backend.options.output-provider[e, output];

    codegen(options: options, program: vm-ir-tube[e], libraries: list[vm-ir-tube[e]]): output throws e;
}

interface code-generator-factory[e: exception, output] {
    create[a](callback: code-generator-factory-callback[e, output, a]): a;
}

interface code-generator-factory-callback[e: exception, output, a] {
    call[options](code-generator: code-generator[e, options, output]): a;
}

interface test-executor[e: exception, output, test-program] {
    to-test-program(program: output): test-program throws e;
    run(program: test-program, libraries: library-map[test-program]): string throws test-execution-exception;
}

interface test-executor-factory[e: exception, output] {
    create[a](callback: test-executor-factory-callback[e, output, a]): a;
}

interface test-executor-factory-callback[e: exception, output, a] {
    call[test-program](test-executor: test-executor[e, output, test-program]): a;
}

record library-map[a] {
    entries: list[library-map-entry[a]];
}

record library-map-entry[a] {
    name: argon.vm.tube-name;
    library: a;
}

@java:(mapped-to "java.lang.Throwable")
extern type test-execution-failure;
exception test-execution-exception of test-execution-failure;



interface vm-ir-tube[e: exception] {
    stream(): scoped-resource[stream[e, argon.vm.tube-file-entry]] throws e;
}

interface scoped-resource[a] {
    get(): a;
    close(): unit;
}

interface stream[e: exception, a] {
    next(): list[a] throws e;
}
