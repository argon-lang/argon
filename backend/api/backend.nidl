package argon.backend;

import nobleidl.core;

interface backend[e: exception, options, output] {
    code-generator(): code-generator[e, options, output];
}

@scala:(adapter-needs-zio-runtime)
extern type binary-resource[e: exception];

@scala:(adapter-needs-zio-runtime)
extern type directory-resource[e: exception];

record directory-entry[e: exception] {
    dirs: list[string];
    file-name: string;
    resource: binary-resource[e];
}


enum code-generator[e: exception, options, output] {
    library {
        generator: library-code-generator[e, options, output];
    },
}

interface library-code-generator[e: exception, options, output] {
    codegen(options: options, program: vm-ir-tube[e], libraries: library-map[e]): output throws e;
}



interface vm-ir-tube[e: exception] {
    stream(): scoped-resource[stream[e, argon.vm.tube-file-entry]] throws e;
}

interface scoped-resource[a] {
    get(): a;
    close(): unit;
}

interface stream[e: exception, a] {
    next(): option[a] throws e;
}

record library-map[e: exception] {
    entries: list[library-map-entry[e]];
}

record library-map-entry[e: exception] {
    name: argon.vm.tube-name;
    tube: vm-ir-tube[e];
}
