package argon.backend;

import nobleidl.core;

interface backend[e: exception, output] {
    code-generator(): code-generator-factory[e, output];
}

@scala:(adapter-needs-zio-runtime)
extern type binary-resource[e: exception];

interface directory-resource[e: exception] {
    contents(): scoped-resource[stream[e, directory-entry[e]]] throws e;
}


record directory-entry[e: exception] {
    dirs: list[string];
    file-name: string;
    resource: binary-resource[e];
}


enum code-generator[e: exception, options, output] {
    library {
        generator: library-code-generator[e, options, output];
    },
}

interface library-code-generator[e: exception, options, output] {
    option-parser(): argon.backend.options.option-parser[e, options];
    output-provider(): argon.backend.options.output-provider[e, output];

    codegen(options: options, program: vm-ir-tube[e], libraries: list[vm-ir-tube[e]]): output throws e;
}

interface code-generator-factory[e: exception, output] {
    create[a](callback: code-generator-factory-callback[e, output, a]): a;
}

interface code-generator-factory-callback[e: exception, output, a] {
    call[options](code-generator: code-generator[e, options, output]): a;
}



interface vm-ir-tube[e: exception] {
    stream(): scoped-resource[stream[e, argon.vm.tube-file-entry]] throws e;
}

interface scoped-resource[a] {
    get(): a;
    close(): unit;
}

interface stream[e: exception, a] {
    next(): list[a] throws e;
}
