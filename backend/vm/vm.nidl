package argon.vm;

import nobleidl.core;


@esexpr:(derive-codec)
enum tube-file-entry {
    @esexpr:(inline-value)
    header {
        header: tube-header;
    },

    @esexpr:(inline-value)
    metadata {
        metadata: tube-metadata;
    },

    module-reference {
        module-id: nat;

        tube-id: nat;
        path: module-path;
    },

    @esexpr:(inline-value)
    function-definition {
        definition: function-definition;
    },

    function-reference {
        function-id: nat;
        import: import-specifier;
    },

    @esexpr:(inline-value)
    record-definition {
        definition: record-definition;
    },

    record-reference {
        record-id: nat;
        import: import-specifier;
    },

    record-field-reference {
        record-field-id: nat;

        record-id: nat;
        name: identifier;
    },
}


@esexpr:(derive-codec)
@esexpr:(constructor "Ar18 VMIR")
record tube-header {
    format-version-major: int;
    format-version-minor: int;
}

@esexpr:(derive-codec)
record tube-metadata {
    name: tube-name;

    @esexpr:(keyword)
    referenced-tubes: list[tube-name];

    @esexpr:(keyword)
    @esexpr:(optional)
    platform-metadata: optional-field[esexpr];

    @esexpr:(keyword)
    modules: list[module];
}

@esexpr:(derive-codec)
record module {
    path: module-path;
}


@esexpr:(derive-codec)
record tube-name {
    head: string;
    tail: list[string];
}

@esexpr:(derive-codec)
record module-path {
    path: list[string];
}

@esexpr:(derive-codec)
record module-name {
    tube: tube-name;
    path: module-path;
}


@esexpr:(derive-codec)
enum identifier {
    named { s: string; },
    bin-op { op: binary-operator; },
    un-op { op: unary-operator; },
    extension { inner: identifier; },
    inverse { inner: identifier; },
    update { inner: identifier; },
}

@esexpr:(derive-codec)
simple enum binary-operator {
    plus,
    minus,
    mul,
    div,
    equal,
    not-equal,
    less-than,
    less-than-eq,
    greater-than,
    greater-than-eq,
    bit-or,
    bit-xor,
    bit-and,
    shift-left,
    shift-right,
    concat,
}

@esexpr:(derive-codec)
simple enum unary-operator {
    plus,
    minus,
    bit-not,
    logical-not,
}

@esexpr:(derive-codec)
record erased-signature {
    params: list[erased-signature-type];
    result: erased-signature-type;
}

@esexpr:(derive-codec)
enum erased-signature-type {
    builtin {
        b: builtin-type;

        @esexpr: (vararg)
        args: list[erased-signature-type];
    },
    function {
        input: erased-signature-type;
        output: erased-signature-type;
    },
    record {
        record-import: import-specifier;

        @esexpr: (vararg)
        args: list[erased-signature-type];
    },
    tuple {
        @esexpr: (vararg)
        elements: list[erased-signature-type];
    },
    erased,
}

@esexpr:(derive-codec)
enum builtin-type {
    int,
    bool,
    string,
    never,
    conjunction,
    disjunction,
}

@esexpr:(derive-codec)
record import-specifier {
    module-id: nat;

    @esexpr: (keyword)
    @esexpr: (optional)
    name: optional-field[identifier];

    @esexpr: (keyword)
    sig: erased-signature;
}


@esexpr:(derive-codec)
record function-signature {
    @esexpr:(keyword)
    type-parameters: list[signature-type-parameter];

    @esexpr:(keyword)
    parameters: list[signature-parameter];

    @esexpr:(keyword)
    return-type: vm-type;
}

@esexpr:(derive-codec)
record signature-parameter {
    name: option[identifier];
    param-type: vm-type;
}

@esexpr:(derive-codec)
record signature-type-parameter {
    name: option[identifier];
}

@esexpr:(derive-codec)
record parameter-binding {
    name: option[identifier];
    param-type: vm-type;
}



@esexpr:(derive-codec)
record function-definition {
    function-id: nat;
    import: import-specifier;

    @esexpr:(keyword)
    signature: function-signature;

    @esexpr:(keyword)
    @esexpr:(optional)
    implementation: optional-field[function-implementation];
}

@esexpr:(derive-codec)
enum function-implementation {
    @esexpr:(inline-value)
    vm-ir { body: function-body; },
    extern { extern: esexpr; },
}



@esexpr:(derive-codec)
record record-definition {
    record-id: nat;
    import: import-specifier;

    @esexpr:(keyword)
    signature: function-signature;

    @esexpr:(keyword)
    fields: list[record-field-definition];
}


@esexpr:(derive-codec)
record record-field-definition {
    name: identifier;
    field-type: vm-type;
}


@esexpr:(derive-codec)
enum vm-type {
    builtin {
        b: builtin-type;
        args: list[vm-type];
    },
    function {
        input: vm-type;
        output: vm-type;
    },
    record {
        record-id: nat;
        args: list[vm-type];
    },
    tuple {
        elements: list[vm-type];
    },
    type-parameter {
        index: nat;
    },
    type-info,
    of-type-info {
        r: register-id;
    },
}

@esexpr:(derive-codec)
record function-body {
    @esexpr:(keyword)
    variables: list[variable-definition];

    block: block;
}

@esexpr:(derive-codec)
record block {
    @esexpr:(vararg)
    instructions: list[instruction];
}

@esexpr:(derive-codec)
enum instruction {
    builtin-unary {
        dest: register-id;
        op: builtin-unary-op;
        a: register-id;
    },

    builtin-binary {
        dest: register-id;
        op: builtin-binary-op;
        a: register-id;
        b: register-id;
    },

    const-bool {
        dest: register-id;
        value: bool;
    },

    const-int {
        dest: register-id;
        value: int;
    },

    const-string {
        dest: register-id;
        value: string;
    },

    finally {
        action: block;
        ensuring: block;
    },

    function-call {
        dest: function-result;
        function-id: nat;
        type-args: list[vm-type];
        args: list[register-id];
    },

    if-else {
        condition: register-id;
        when-true: block;
        when-false: block;
    },

    load-type-info {
        dest: register-id;
        type: vm-type;
    },

    move {
        dest: register-id;
        src: register-id;
    },

    return {
        src: register-id;
    },

    tuple {
        dest: register-id;
        values: list[register-id];
    },

    tuple-element {
        dest: register-id;
        element-index: nat;
        src: register-id;
    },
}

@esexpr:(derive-codec)
record register-id {
    id: nat;
}

@esexpr:(derive-codec)
enum function-result {
    register { id: register-id; },
    discard,
    return-value,
}

@esexpr:(derive-codec)
record variable-definition {
    type: vm-type;
}

@esexpr:(derive-codec)
simple enum builtin-unary-op {
    int-negate,
    int-bit-not,
}

@esexpr:(derive-codec)
simple enum builtin-binary-op {
    int-add,
    int-sub,
    int-mul,
    int-bit-and,
    int-bit-or,
    int-bit-xor,
    int-bit-shift-left,
    int-bit-shift-right,
    int-eq,
    int-ne,
    int-lt,
    int-le,
    int-gt,
    int-ge,
    string-concat,
    string-eq,
    string-ne,
}

